// <Col md={6} style={{ display: role ? "block" : "none" }}>
    //   <Card className="mb-4">
    //     <Card.Header>
    //       <h4 className="mb-0">üîê Change Password</h4>
    //     </Card.Header>
    //     <Card.Body>
    //       <Form onSubmit={handleSubmit}>
    //         <Form.Group className="mb-3" controlId="oldPassword">
    //           <Form.Label>Current Password</Form.Label>
    //           <Form.Control
    //             type="password"
    //             name="oldPassword"
    //             value={formData.oldPassword}
    //             onChange={handleChange}
    //             required
    //           />
    //         </Form.Group>

    //         <Form.Group className="mb-3" controlId="newPassword">
    //           <Form.Label>New Password</Form.Label>
    //           <Form.Control
    //             type="password"
    //             name="newPassword"
    //             value={formData.newPassword}
    //             onChange={handleChange}
    //             required
    //           />
    //         </Form.Group>

    //         <Form.Group className="mb-3" controlId="confirmPassword">
    //           <Form.Label>Confirm New Password</Form.Label>
    //           <Form.Control
    //             type="password"
    //             name="confirmPassword"
    //             value={formData.confirmPassword}
    //             onChange={handleChange}
    //             required
    //           />
    //         </Form.Group>

    //         {message && (
    //           <Alert variant={message.includes('successfully') ? 'success' : 'danger'}>
    //             {message}
    //           </Alert>
    //         )}

    //         <div className="d-grid gap-2">
    //           <Button variant="primary" type="submit" disabled={isLoading}>
    //             {isLoading ? 'Changing Password...' : 'Change Password'}
    //           </Button>
    //         </div>
    //       </Form>

    //       <div className="mt-3 text-center">
    //         <Link to="/" className="btn btn-secondary">
    //           Back to Dashboard
    //         </Link>
    //       </div>
    //     </Card.Body>
    //   </Card>
    // </Col>
    // Add this to your imports
const {
  subject,
  subjects,
  units,
  fetchSubjects,
  fetchUnits,
  note,
  fetchNote,
  updateNote,
  deleteNote, // Add this
  isDeletingNote, // Add this
  isLoadingNote,
} = useNotes();

// Add this handler function
const handleDeleteNote = async () => {
  if (!subject || !activeDocId) {
    console.warn("No subject or docId selected for deletion");
    setSaveStatus("error");
    setTimeout(() => setSaveStatus(null), 5000);
    return;
  }

  if (window.confirm("Are you sure you want to delete this note?")) {
    try {
      const result = await deleteNote(subject, activeDocId);
      if (result.success) {
        setSaveStatus("success");
        setNote(null);
        setActiveDocId(null);
        // Optionally select the first available unit after deletion
        if (units.length > 1) {
          const remainingUnits = units.filter(unit => unit.docId !== activeDocId);
          if (remainingUnits.length > 0) {
            const firstUnit = remainingUnits[0];
            setActiveDocId(firstUnit.docId);
            fetchNote(firstUnit);
          }
        }
      } else {
        throw new Error(result.error);
      }
    } catch (err) {
      setSaveStatus("error");
      console.error("Failed to delete note:", err.message);
    } finally {
      setTimeout(() => setSaveStatus(null), 4000);
    }
  }
};

// Update your button
<button
  onClick={handleDeleteNote}
  disabled={isDeletingNote || !activeDocId}
  className={`px-3 py-1.5 rounded-md text-sm font-medium transition-colors flex items-center ${
    isDeletingNote || !activeDocId
      ? "bg-gray-400 text-white cursor-not-allowed"
      : "bg-red-500 text-white hover:bg-red-600"
  }`}
  title="Delete Note"
>
  <svg
    className="w-4 h-4"
    fill="none"
    stroke="currentColor"
    viewBox="0 0 24 24"
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="2"
      d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
    />
  </svg>
</button>